;;; $Id$
;;; the launchpad transparently scans keypad/fiveway/volume keystrokes
;;; until the user presses and releases the hot sequence INTRODUCER key.
;;; This enters hotkey mode, where keystrokes are captured and not passed
;;; to the Kindle up to the pressure of the TRAILER key, or a idle time
;;; of HOTINTERVAL millisecond.
;;; At this point capture is released, and captured keys are compared with
;;; existing ACTIONS. In case of a match, we execute the action, otherwise
;;; input is transferred back to the kindle.
;;; This config file is split into [sections] with generic configuration
;;; being in [SETTINGS], actions in [ACTIONS], keystroke definitions
;;; in [INKEYS], [INKEYS-DX] and [INKEYS-K3].
;;; configuration can be included with an 'include = filename' line.

[Settings]
    Introducer = Shift         
    Trailer = Enter
    ; terminal key configuration
    TermEnd = Left<
    TermEsc = Left>
    TermCtrl = aA
    TermSym = Back ; so we can map other keys
    TermShift = Shift
    TermFn = Menu

    HotInterval = 1000
    InterKeyDelay = 50
    RefreshDelay = 50
    ScriptDirectory = ./scripts
    #KpadIn = /dev/stdin
    KpadIn = /dev/input/event0
    FwIn = /dev/input/event1
    VolIn = /dev/input/event2
    KpadOut = /proc/keypad
    FwOut = /proc/fiveway
    VolOut = /proc/volume

    include = keydefs.ini
;;; actions are defined below as <key_sequence> = <action_command>
;;; one action definition per text line.
;;; 
;;; <key_sequence> is a blank separated list of key symbolic names. See keydefs.ini for details.
;;; <action_command> describes the action to execute on a particular hotkey sequence.
;;; Currently three type of action supported depending on the first character of the 
;;; command string:
;;;  '!' -- shell command. The command string excluding the leading '!' is sent to the
;;;         system shell, exactly as it was typed from the console.  
;;;  '@' -- Kindle Framework script. The command string excluding the leading '@' is interpreted
;;;         as a name of a special script containing command information obeying format of
;;;         the known hotkeys package. The main purpose of these scripts is to simplify
;;;         entering special symbols into kindle Framework search box
;;;  '#' -- Kindle Framework key sequence. Similar to the above, but doesn't require 
;;;         external script.
;;;   all other command strings are interpreted as a sequence of a send_key commands. The contents of these 
;;;   commands gets interpreted and sent as a sequence of simulated keystrokes to the input subsystem.
;;;   Such commands consist of the space-separated tokens, which can be symbolic key names and/or
;;;   ascii strings enclosed in quotes (")
;;;
;;;   Note: to correctly accept a kindle key sequence beginning with a special
;;;         symbol, the Framework search box should be brought up, if not already.
;;;         Press the 'Del' key on Kindle in order to bring the search box up
;;;
 
[Actions]
    z = "testing luigi@foo.bar; me-12+55" 'Enter'
    F B = !/mnt/us/FBReader/goqt.sh FBReader &
    A F = !/etc/init.d/framework restart
    ;
    ;Dot = @SHIFT-DOT.sh
    ;
    D = #';' "debugOn"
    shift D = #';' "debugOff"
    N = #"~usbNetwork"
    T = !terminal 1
    shift T = !terminal 2
    # refresh content of /mnt/us/documents
    shift R = !dbus-send --system /default com.lab126.powerd.resuming int32:1 &
    # set/reset 'connected' flag
    C = !dbus-send --system /default com.lab126.wifid.cmConnected &
    D = !dbus-send --system /default com.lab126.wifid.cmDisconnected &
